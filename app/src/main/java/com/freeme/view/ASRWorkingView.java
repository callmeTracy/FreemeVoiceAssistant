/* * File name: ManMachinePanel.java *  * Description: the view that animate by voice input. * * Author: Kimi_wu, contact with wuqizhi@tydtech.com *  * Date: 2015-9-22    *  * Copyright (C) 2014 TYD Technology Co.,Ltd. *  *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.freeme.view;import android.content.Context;import android.graphics.Canvas;import android.graphics.Paint;import android.view.View;import android.util.AttributeSet;/** * @author heqianqian on 20160106 */public class ASRWorkingView extends View {    private float mCurrentTimeValue;    public static final int LEVEL_1 = 1;    public static final int LEVEL_2 = 2;    public static final int LEVEL_3 = 3;    private static final int STRIDE = 7;    private static final int STRIDF = 12;    private static final int R1 = 35;    private static final int R2 = 46;    private int strength = LEVEL_1; // more strength, more circles    private Paint mPaint;    private int mCX;    private int mCY;    private int mFirstR;    private int mLastR;    public ASRWorkingView(Context context, AttributeSet attrs) {        super(context, attrs);        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setColor(0x33b570);        mPaint.setStyle(Paint.Style.STROKE);        final float scale = context.getResources().getDisplayMetrics().density;        mFirstR = (int) (R1 * scale + 0.5f);        mLastR = (int) (R2 * scale + 0.5f);        mCX = mCY = mLastR;        strength = LEVEL_1;    }    public void updateTile(float timevalue) {        mCurrentTimeValue = Math.abs(timevalue);        invalidate();    }    @Override    protected void onDraw(Canvas canvas) {        canvas.save();        int scope = mLastR - mFirstR;        mPaint.setAlpha((int) ((1 - mCurrentTimeValue) * 255));        drawCircle(canvas, mFirstR + scope * mCurrentTimeValue);        // level strength        if (strength >= LEVEL_2) {            //drawCircle(canvas, mFirstR + 1* STRIDE + scope * mCurrentTimeValue);            drawCircle(canvas, mFirstR + 2 * STRIDE + scope * mCurrentTimeValue);        }        if (strength >= LEVEL_3) {            drawCircle(canvas, mFirstR + 3 * STRIDF + scope * mCurrentTimeValue);            //drawCircle(canvas, mFirstR + 4 * STRIDF + scope * mCurrentTimeValue);        }        canvas.restore();    }    public static int dp2px(Context context, float dpValue) {        final float scale = context.getResources().getDisplayMetrics().density;        return (int) (dpValue * scale + 0.5f);    }    private void drawCircle(Canvas canvas, float r) {        if (r >= mFirstR + (mLastR - mFirstR) / 2) {            mPaint.setStrokeWidth(1);        } else {            mPaint.setStrokeWidth(2);        }        canvas.drawCircle(mCX, mCY, r, mPaint);    }}